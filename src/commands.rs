use std::{ env, time::Duration };

use chrono::{ DateTime, Datelike };
use teloxide::{
    payloads::SendMessageSetters,
    requests::Requester,
    types::{ ChatId, InlineKeyboardButton, InlineKeyboardMarkup, Message },
    Bot,
};
use tokio::sync::Mutex as TokioMutex;

use crate::{
    database::Database,
    messages::receive_message,
    models::{ chat_type::ChatType, gender::Gender },
    state::State,
    user_state::{ self, UserState },
    Dialog,
    HandlerResult,
    DATABASE,
};

pub async fn admin_message(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    let admin = env::var("ADMIN").unwrap();
    if msg.chat.id.0.to_string() == admin {
    }

    let db = DATABASE.get_or_init(|| TokioMutex::new(Database::new("db.db").unwrap()));
    let users = db.lock().await.get_all_users().unwrap();

    for user in users {
        let _ = bot.send_message(
            ChatId(user.id),
            format!("--- SinChat ---\n\n{}", msg.text().unwrap().split("/message").nth(1).unwrap())
        ).await;
    }

    Ok(())
}

pub async fn rules(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    bot.send_message(
        msg.chat.id,
        "–ß—Ç–æ –ó–ê–ü–†–ï–©–ï–ù–ù–û –≤ SinChat\n\nüí¨–û–±—â–∏–µ\n–†–µ–∫–ª–∞–º–∞\n–ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ\n–°–ø–∞–º\n–ù–∞—Ü–∏–∑–º / —Ñ–∞—à–∏–∑–º / —Ä–∞—Å–∏–∑–º\n–ë—É–ª–∏–Ω–≥\n\nüí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç\n–†–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ —Ç–µ–º—ã 18+ \n–í—ã–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\nüîû –ü–æ—à–ª—ã–π —á–∞—Ç\n–û–±—â–∞—Ç—å—Å—è –Ω–∞ –ù–ï –ø–æ—à–ª—ã–µ —Ç–µ–º—ã\n–ò—Å–∫–∞—Ç—å –¥—Ä—É–∑–µ–π\n\n–ó–∞ –ª—é–±–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è –∏–∂–µ 20, –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n\n‚ö†Ô∏è–ù–ï –ó–ù–ê–ù–ò–ï –ü–†–ê–í–ò–õ, –ù–ï –£–ë–ò–†–ê–ï–¢ –° –í–ê–° –û–¢–í–ï–¢–°–í–ï–ù–ù–û–°–¢–ò‚ö†Ô∏è"
    ).await?;

    Ok(())
}

pub async fn ban(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    if let Some(txt) = msg.text() {
        if txt.split("/ban").nth(1).is_none() {
            bot.send_message(msg.chat.id, format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")).await?;
            return Ok(());
        }
    }

    let admin = env::var("ADMIN").unwrap();

    if msg.chat.id.0.to_string() == admin {
        let db = Database::new("db.db").unwrap();
        let user = db.get_user(
            msg.text().unwrap().split("/ban").nth(1).unwrap().trim().parse::<i64>().unwrap()
        );

        if user.is_ok() {
            let user = user.unwrap();

            if user.is_some() {
                let user = user.unwrap();

                let id = msg
                    .text()
                    .unwrap_or("/ban")
                    .split("/ban")
                    .nth(1)
                    .unwrap_or("")
                    .trim()
                    .parse::<i64>()
                    .unwrap_or(0);
                if id != 0 {
                    db.ban_user(id).unwrap();
                    bot.send_message(msg.chat.id, format!("–ì–æ—Ç–æ–≤–æ\n\n{:#?}", user)).await?;
                } else {
                    bot.send_message(msg.chat.id, format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")).await?;
                }
            }
        }
    }

    Ok(())
}

pub async fn unban(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    if let Some(txt) = msg.text() {
        if txt.split("/unban").nth(1).is_none() {
            bot.send_message(msg.chat.id, format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")).await?;
            return Ok(());
        }
    }

    let admin = env::var("ADMIN").unwrap();

    if msg.chat.id.0.to_string() == admin {
        let db = Database::new("db.db").unwrap();
        let user = db.get_user(
            msg.text().unwrap().split("/unban").nth(1).unwrap().trim().parse::<i64>().unwrap()
        );

        if user.is_ok() {
            let user = user.unwrap();

            if user.is_some() {
                let user = user.unwrap();

                let id = msg
                    .text()
                    .unwrap_or("/unban")
                    .split("/unban")
                    .nth(1)
                    .unwrap_or("")
                    .trim()
                    .parse::<i64>()
                    .unwrap_or(0);
                if id != 0 {
                    db.unban_user(id).unwrap();
                    bot.send_message(msg.chat.id, format!("–ì–æ—Ç–æ–≤–æ\n\n{:#?}", user)).await?;
                } else {
                    bot.send_message(msg.chat.id, format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")).await?;
                }
            }
        }
    }

    Ok(())
}

pub async fn referral(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    let link = format!("https://t.me/s1nchat_bot?start={}", msg.chat.id.0);
    bot.send_message(
        msg.chat.id,
        format!("–ü—Ä–∏–≥–ª–∞—Å–∏ 10 —á–µ–ª–æ–≤–µ–∫ –∏ –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º –Ω–∞ –Ω–µ–¥–µ–ª—é!\n\n–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {}\n\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:", link)
    ).await?;

    bot.send_message(
        msg.chat.id,
        format!("üí´ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø–æ –ø–æ–ª—É, –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —á–∞—Ç–æ–≤!\n\nüëª–°–∫–æ—Ä–µ–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n\n{}", link)
    ).await?;

    Ok(())
}

pub async fn top(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    let db = DATABASE.get().unwrap().lock().await;
    let users = db.get_top_referral_users(10);
    if users.is_ok() {
        let users = users.unwrap();
        let mut response = String::new();
        response.push_str("üí´–¢–û–ü 10 –ü–û –†–ï–§–ï–†–ê–õ–ê–ú\n\n");

        for user in users {
            response.push_str(
                &format!(
                    "{} {} ¬ª {}\n",
                    if user.gender == Gender::Male {
                        "–ú—É–∂—Å–∫–æ–π ‚ôÇ"
                    } else {
                        "–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ"
                    },
                    user.nickname,
                    user.referrals
                )
            );
        }
        bot.send_message(msg.chat.id, &response).await?;
        bot.send_message(msg.chat.id, "/referral - —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç–æ—Ç —Ç–æ–ø").await?;
    } else {
        bot.send_message(msg.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é").await?;
    }

    Ok(())
}

pub async fn premium(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    bot.send_message(
        msg.chat.id,
        "–ü—Ä–∏–≥–ª–∞—Å–∏ 10 —á–µ–ª–æ–≤–µ–∫ –∏ –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–µ–º–∏—É–º –Ω–∞ –Ω–µ–¥–µ–ª—é!\n\nüíé –ß—Ç–æ –¥–∞—ë—Ç –ø—Ä–µ–º–∏—É–º?\n\n–ü–æ–ª—É—á–∏–≤ –ø—Ä–µ–º–∏—É–º –≤—ã –º–æ–∂–µ—Ç–µ:\n\n1. –ò–º–µ—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ\n2. —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ—à–ª–æ–≥–æ –∏ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞\n3. –ü–µ—Ä–≤–µ–µ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º —á–∞—Ç–∞\n4. –í—Å–µ –≤–∏–¥—è—Ç –≤–∞—à –ø—Ä–µ–º–∏—É–º"
    ).await.unwrap();

    Ok(())
}
pub async fn top_rep(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    let db = DATABASE.get().unwrap().lock().await;
    let users = db.get_top_reputation_users(10);
    if users.is_ok() {
        let users = users.unwrap();
        let mut response = String::new();
        response.push_str("üí´–¢–û–ü 10 –ü–û –†–ï–ü–£–¢–ê–¶–ò–ò\n\n");

        for user in users {
            response.push_str(
                &format!(
                    "{} {} {} ¬ª {}\n",
                    if user.is_premium {
                        "üíé –ü—Ä–µ–º–∏—É–º"
                    } else {
                        ""
                    },
                    if user.gender == Gender::Male {
                        "–ú—É–∂—Å–∫–æ–π ‚ôÇ"
                    } else {
                        "–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ"
                    },
                    user.nickname,
                    user.reputation
                )
            );
        }
        bot.send_message(msg.chat.id, &response).await?;
    } else {
        bot.send_message(msg.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é").await?;
    }

    Ok(())
}

pub async fn user_info(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    let admin = env::var("ADMIN").unwrap();

    if msg.chat.id.0.to_string() == admin {
        let db = Database::new("db.db").unwrap();
        let user = db.get_user(
            msg
                .text()
                .unwrap_or("/userinfo")
                .split("/userinfo")
                .nth(1)
                .unwrap_or("")
                .trim()
                .parse::<i64>()
                .unwrap_or(msg.chat.id.0)
        );

        if user.is_ok() {
            let user = user.unwrap();

            if user.is_some() {
                let user = user.unwrap();

                bot.send_message(
                    msg.chat.id,
                    format!(
                        "{}\n\nüÜî: {}\n–ù–∏–∫–Ω–µ–π–º: {}\n–ü–æ–ª: {}\n–í–æ–∑—Ä–∞—Å—Ç: {}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π: {}",
                        if user.is_premium {
                            "üíé –ü—Ä–µ–º–∏—É–º"
                        } else {
                            ""
                        },
                        user.id,
                        user.nickname,
                        if user.gender == Gender::Male {
                            "–ú—É–∂—Å–∫–æ–π ‚ôÇ"
                        } else {
                            "–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ"
                        },
                        user.age,
                        user.reputation,
                        user.referrals
                    )
                ).await?;
                bot.send_message(msg.chat.id, format!("{:#?}", user)).await?;
            }
        }
    } else {
        let db = Database::new("db.db").unwrap();
        let user = db.get_user(msg.chat.id.0).unwrap().unwrap();

        bot.send_message(
            msg.chat.id,
            format!(
                "{}\n\n–ù–∏–∫–Ω–µ–π–º: {}\n–ü–æ–ª: {}\n–í–æ–∑—Ä–∞—Å—Ç: {}\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π: {}",
                user.id,
                user.nickname,
                if user.gender == Gender::Male {
                    "–ú—É–∂—Å–∫–æ–π ‚ôÇ"
                } else {
                    "–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ"
                },
                user.age,
                user.reputation,
                user.referrals
            )
        ).await?;
    }

    Ok(())
}

pub async fn delete_user(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    if let Some(txt) = msg.text() {
        if txt.split("/delete").nth(1).is_none() {
            bot.send_message(msg.chat.id, format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")).await?;
            return Ok(());
        }
    }

    let admin = env::var("ADMIN").unwrap();

    if msg.chat.id.0.to_string() == admin {
        let db = Database::new("db.db").unwrap();
        let user = db.get_user(
            msg.text().unwrap().split("/delete").nth(1).unwrap().trim().parse::<i64>().unwrap()
        );

        if user.is_ok() {
            let user = user.unwrap();

            if user.is_some() {
                let user = user.unwrap();

                let id = msg
                    .text()
                    .unwrap_or("/delete")
                    .split("/delete")
                    .nth(1)
                    .unwrap_or("")
                    .trim()
                    .parse::<i64>()
                    .unwrap_or(0);
                if id != 0 {
                    db.delete_user_by_id(id).unwrap();
                    bot.send_message(msg.chat.id, format!("–ì–æ—Ç–æ–≤–æ\n\n{:#?}", user)).await?;
                } else {
                    bot.send_message(msg.chat.id, format!("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")).await?;
                }
            }
        }
    }

    Ok(())
}
pub async fn admin(bot: Bot, _: Dialog, msg: Message) -> HandlerResult {
    let admin = env::var("ADMIN").unwrap();
    let db = Database::new("db.db").unwrap();
    let total_users = db.get_total_users()?;
    let female_count = db.get_female_count()?;
    let male_count = db.get_male_count()?;
    let total_chats = db.get_total_chats()?;
    let total_queue = db.get_queue_count()?;
    let total_male_queue = db.get_male_queue_count()?;
    let total_female_queue = db.get_female_queue_count()?;

    if msg.chat.id.0.to_string() == admin {
        bot.send_message(
            msg.chat.id,
            format!(
                "Users: {}\n–ú—É–∂—Å–∫–æ–π ‚ôÇ Males: {}\n–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ Females: {}\n\nüí¨ Chats: {}\nQueue: {}\n\n\n–ú—É–∂—Å–∫–æ–π ‚ôÇ Queue Males: {}\n–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ Queue Females: {}",
                total_users,
                male_count,
                female_count,
                total_chats,
                total_queue,
                total_male_queue,
                total_female_queue
            )
        ).await?;
    }

    Ok(())
}

pub async fn stop(bot: Bot, dialog: Dialog, msg: Message) -> HandlerResult {
    let db = DATABASE.get_or_init(|| TokioMutex::new(Database::new("db.db").unwrap())).lock().await;

    let intr = db.delete_chat(dialog.chat_id().0);
    dialog.update(State::Idle).await?;

    if intr.is_ok() {
        let intr = intr.unwrap();

        if intr.is_some() {
            let intr = intr.unwrap();

            db.set_user_state(msg.chat.id.0, UserState::Idle).unwrap();
            db.set_user_state(intr, UserState::Idle).unwrap();

            let reactions = [
                InlineKeyboardButton::callback("üëç", format!("like_{}", intr)),
                InlineKeyboardButton::callback("üëé", format!("dislike_{}", intr)),
            ];
            bot
                .send_message(
                    dialog.chat_id(),
                    "–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n/next - –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                )
                .reply_markup(InlineKeyboardMarkup::new([reactions])).await?;

            let reactions = [
                InlineKeyboardButton::callback("üëç", format!("like_{}", msg.chat.id)),
                InlineKeyboardButton::callback("üëé", format!("dislike_{}", msg.chat.id)),
            ];
            bot
                .send_message(ChatId(intr), "–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∏–∞–ª–æ–≥!!")
                .reply_markup(InlineKeyboardMarkup::new([reactions])).await?;
        } else {
            bot.send_message(msg.chat.id, "–¢—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ!").await?;
        }
    } else {
        bot.send_message(msg.chat.id, "–¢—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –¥–∏–∞–ª–æ–≥–µ!").await?;
    }
    dialog.update(State::Idle).await?;

    Ok(())
}

pub async fn cancel(bot: Bot, dialog: Dialog, msg: Message) -> HandlerResult {
    let db = DATABASE.get_or_init(|| TokioMutex::new(Database::new("db.db").unwrap())).lock().await;
    db.dequeue_user(msg.chat.id.0).unwrap();
    bot.send_message(msg.chat.id, "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω!").await?;
    dialog.update(State::Idle).await?;
    db.set_user_state(msg.chat.id.0, UserState::Idle).unwrap();

    Ok(())
}

pub async fn next(bot: Bot, dialog: Dialog, msg: Message) -> HandlerResult {
    let db = DATABASE.get().unwrap().lock().await;
    let user = db.get_user(msg.chat.id.0);

    if user.is_ok() {
        let user = user.unwrap();
        if user.is_some() {
            let user = user.unwrap();

            if user.is_banned {
                bot.send_message(ChatId(user.id), "–í—ã –∑–∞–±–ª–æ–∫–∞–∏—Ä–æ–≤–∞–Ω—ã!").await?;
                return Ok(());
            }
            if user.is_premium {
                let now = chrono::Utc::now();

                if now.timestamp() > user.premium_until {
                    db.set_premium(user.id, false).unwrap();
                    db.set_premium_until(user.id, 0).unwrap();

                    bot.send_message(ChatId(user.id), "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!").await?;
                }
            }

            if user.search_gender.is_none() || user.chat_type.is_none() {
                bot.send_message(
                    ChatId(user.id),
                    "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–æ—à–ª—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã! \n\n/search - —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å"
                ).await?;
                return Ok(());
            }

            let chat = db.get_chat(msg.chat.id.0);
            if chat.is_ok() {
                let chat = chat.unwrap();
                if chat.is_some() {
                    let chat = chat.unwrap();
                    let _ = db.delete_chat(msg.chat.id.0);
                    db.set_user_state(msg.chat.id.0, UserState::Idle).unwrap();
                    db.set_user_state(chat, UserState::Idle).unwrap();

                    let reactions = [
                        InlineKeyboardButton::callback("üëç", format!("like_{}", chat)),
                        InlineKeyboardButton::callback("üëé", format!("dislike_{}", chat)),
                    ];
                    bot
                        .send_message(
                            dialog.chat_id(),
                            "–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n/next - –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                        )
                        .reply_markup(InlineKeyboardMarkup::new([reactions])).await?;

                    let reactions = [
                        InlineKeyboardButton::callback("üëç", format!("like_{}", msg.chat.id)),
                        InlineKeyboardButton::callback("üëé", format!("dislike_{}", msg.chat.id)),
                    ];
                    bot
                        .send_message(ChatId(chat), "–¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–∏–∞–ª–æ–≥!!")
                        .reply_markup(InlineKeyboardMarkup::new([reactions])).await?;
                }
            }
            let result = db.enqueue_user(
                dialog.chat_id().0,
                user.search_gender.unwrap(),
                user.gender,
                user.chat_type.as_ref().unwrap().clone()
            );

            if result.is_ok() {
                let result = result.unwrap();
                let cancel = [InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel")];

                if result != 0 {
                    dialog.update(State::Dialog {
                        interlocutor: result as u64,
                    }).await?;
                    let interlocutor = db.get_user(result).unwrap().unwrap();

                    if user.is_premium {
                        bot.send_message(
                            dialog.chat_id(),
                            format!(
                                "üÜî: {}\n–ü–æ–ª: {}\n–ü—Å–µ–≤–¥–æ–Ω–∏–º: {} \n–í–æ–∑—Ä–∞—Å—Ç: {}\n\n–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n/next - —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop - —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥",

                                interlocutor.id,
                                if interlocutor.gender == Gender::Male {
                                    "–ú—É–∂—Å–∫–æ–π ‚ôÇ"
                                } else {
                                    "–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ"
                                },
                                interlocutor.nickname,
                                interlocutor.age
                            )
                        ).await?;
                    } else {
                        bot.send_message(
                            dialog.chat_id(),
                            format!(
                                "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n/next - —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop - —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥"
                            )
                        ).await?;
                    }

                    if interlocutor.is_premium {
                        bot.send_message(
                            ChatId(result),
                            format!(
                                "{} \n\n–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\nüÜî: {}\n–ü–æ–ª: {}\n–ü—Å–µ–≤–¥–æ–Ω–∏–º: {} \n–í–æ–∑—Ä–∞—Å—Ç: {}\n\n/next - —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop - —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                                if user.chat_type == Some(ChatType::Regular) {
                                    "üí¨"
                                } else {
                                    "üîû"
                                },
                                user.id,
                                if user.gender == Gender::Male {
                                    "–ú—É–∂—Å–∫–æ–π ‚ôÇ"
                                } else {
                                    "–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ"
                                },
                                user.nickname,
                                user.age
                            )
                        ).await?;
                    } else {
                        bot.send_message(
                            ChatId(result),
                            format!(
                                "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n/next - —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop - —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥"
                            )
                        ).await?;
                    }

                    db.set_user_state(user.id, user_state::UserState::Dialog).unwrap();
                    db.set_user_state(result, user_state::UserState::Dialog).unwrap();
                } else {
                    bot
                        .send_message(dialog.chat_id(), "–ò—â—É...")
                        .reply_markup(InlineKeyboardMarkup::new([cancel])).await?;
                    dialog.update(State::Search).await?;

                    db.set_user_state(user.id, user_state::UserState::Search).unwrap();
                }
            } else {
                bot.send_message(dialog.chat_id(), format!("–û–π! –ì–æ–ª–æ–≤–∞ –∫—Ä—É–∂–∏—Ç—Å—è...")).await?;
            }
        }
    }

    Ok(())
}

pub async fn start(bot: Bot, dialog: Dialog, msg: Message) -> HandlerResult {
    let db = DATABASE.get_or_init(|| TokioMutex::new(Database::new("db.db").unwrap())).lock().await;

    if let Some(txt) = msg.text() {
        if let Some(id) = txt.split("/start").nth(1) {
            let id = id.trim().parse::<i64>();

            if id.is_ok() {
                let id = id.unwrap();

                let user = db.get_user(id);
                if user.is_ok() {
                    let user = user.unwrap();

                    if user.is_some() {
                        let user = user.unwrap();
                        let u = db.get_user(msg.chat.id.0);

                        if u.is_err() || u.unwrap().is_none() {
                            if user.referrals + 1 >= 10 {
                                db.set_premium(user.id, true).unwrap();

                                let new_premium;
                                if user.is_premium {
                                    let old_premium = match
                                        DateTime::from_timestamp(user.premium_until, 0)
                                    {
                                        Some(o) => o,
                                        None => chrono::Utc::now(),
                                    };
                                    new_premium =
                                        old_premium + chrono::Duration::try_days(7).unwrap();
                                } else {
                                    let now = chrono::Utc::now();
                                    new_premium = now + chrono::Duration::try_seconds(1).unwrap();
                                }
                                db.set_premium_until(user.id, new_premium.timestamp()).unwrap();

                                bot.send_message(ChatId(user.id), "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–º–∏—É–º üíé").await?;
                                let _ = bot.send_message(
                                    ChatId(user.id),
                                    format!(
                                        "–í–∞—à –ø—Ä–µ–º–∏—É–º –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {}",
                                        new_premium.format("%d.%m.%Y")
                                    )
                                ).await;
                            }
                            let _ = db.increase_referral_count(user.id);
                            let _ = bot.send_message(
                                ChatId(user.id),
                                format!(
                                    "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à—ë–ª 1 —á–µ–ª–æ–≤–µ–∫! \n\n–î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º üíé –æ—Å—Ç–∞–ª–æ—Å—å: {} —á–µ–ª–æ–≤–µ–∫",
                                    10 - (user.referrals + 1)
                                )
                            ).await;
                        }
                    }
                }
            }
        }
    }

    let user = db.get_user(dialog.chat_id().0);

    if user.is_ok() && user.as_ref().unwrap().is_some() {
        idle(bot, dialog, msg).await?;
    } else {
        bot.send_message(msg.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç Sin!").await?;
        bot.send_message(msg.chat.id, "–ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: ").await?;
        dialog.update(State::ReceiveAge).await?;
    }

    Ok(())
}
pub async fn idle(bot: Bot, dialog: Dialog, msg: Message) -> HandlerResult {
    if let Some(txt) = msg.text() {
        if txt.contains("search") {
            let db = DATABASE.get_or_init(||
                TokioMutex::new(Database::new("db.db").unwrap())
            ).lock().await;

            let user = db.get_user(dialog.chat_id().0);

            if user.is_ok() && user.as_ref().unwrap().is_some() {
                let user = user.unwrap().unwrap();
                if user.state == UserState::Dialog {
                    bot.send_message(
                        dialog.chat_id(),
                        "–¢—ã –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É! –û—Å—Ç–∞–Ω–æ–≤–∏ –¥–∏–∞–ª–æ–≥"
                    ).await?;

                    return Ok(());
                } else if user.state == UserState::Search {
                    bot.send_message(dialog.chat_id(), "–ù–µ –º–µ—à–∞–π! –Ø –∏—â—É").await?;

                    return Ok(());
                }
            } else {
                bot.send_message(
                    dialog.chat_id(),
                    "–¢—ã –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É! –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Å—è!\n\n/start"
                ).await?;

                return Ok(());
            }

            let genders = ["–ú—É–∂—Å–∫–æ–π ‚ôÇ", "–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ"].map(|product|
                InlineKeyboardButton::callback(product, product)
            );
            bot.send_message(dialog.chat_id(), "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
                .reply_markup(InlineKeyboardMarkup::new([genders])).await
                .unwrap();
            dialog.update(State::SearchChooseGender).await.unwrap();
        } else {
            receive_message(bot, dialog, msg).await?;
        }
    } else {
        receive_message(bot, dialog, msg).await?;
    }

    Ok(())
}
